What you'll find here:


----------------------------------------------------------------------------

Software to provide TTL to a Canon 244T.  This uses a double exposure
method.  The 1st exposure fires only the preflash.  The 2nd exposure
fires only the post flash with the required power.

THE 300V CAPS MUST BE COMPLETELY DISCHARGED BEFORE ANY WORK ON THE
FLASH.  The caps retain lethal voltage indefinitely after the flash is
powered off.

The 244T has a trigger signal & a quench signal inside.  The time
between the trigger & quench determines the power.  A previous design
used variable resistance to simulate a photodiode.  The latest design
only uses a timer.

The original photodiode, hot shoe must be disconnected.  Several new
connections are made to the flash.

manual_to_ttl.c: the latest program with outdated GPIOs
manual_to_ttl.pcb: the circuit board
244t.FCStd: an enclosure for the board

flash34.jpg: diagram of the flash connection points

resistor*.jpg: obsolete board in various stages of completion

flash_pot.pcb: obsolete circuit board using a junk LED readout.  Read with the
pcb program: http://pcb.geda-project.org/  It connects to the following
flash pads:

    BOARD -> FLASH
    6V -> 5.5V
    RESISTOR W -> PHOTODIODE 0V
    GND -> BATT GND
    The crystal can be any frequency down to 32khz.




usb_programmer.c: a junk PIC programmer.  The hex file is programmable
with a pickit for mortals but pickit users must create an mplab project
to write the special function registers & hex file.

flash_pot.s: the PIC firmware.  Requires gpasm to compile.

------------------------------------------------------------------------------

Convert a wired Canon ETTL flash to wireless.

A camera module emulates a flash connected to the camera.  A flash
module emulates a camera connected to the flash.  This required a 168Mhz
processor to bit bang fast enough, though the flash side might be doable
with something slower.

This requires stm32stuff to be in the parent directory.  Compile with
make wireless.bin.  Install with ../stm32stuff/uart_programmer wireless.bin

Tap the button to blink the current channel.  Hold the button to cycle
through the channels.

Enable SIM_CAM to compile the flash firmware.
Enable SIM_FLASH to compile the camera firmware.

Disable ENABLE_PRINT in the Makefile to increase robustness.


enclosure2.FCStd: Freecad models of the enclosures.
    flash top, flash bottom: flash enclosure
    camera mid, camera bottom: camera enclosure
    camera top: be sure the support layer is the shortest path

TODO: camera board should be sandwiched between the switches & hot
shoe.  This emerged as a more convenient arrangement.

wireless.c, camera.c flash.c wireless.h: STM32 firmware

bootload.c, bootloader.X: single wire bootloader for a failed PIC implementation

wireless.pcb: failed PIC board that might work on the flash side

wireless2.pcb: STM32 board that works on both sides

wireless.X: failed PIC firmware











